from facebook_business import apiconfig as apiconfig
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.exceptions import FacebookBadObjectError as FacebookBadObjectError, FacebookBadParameterError as FacebookBadParameterError, FacebookRequestError as FacebookRequestError, FacebookUnavailablePropertyException as FacebookUnavailablePropertyException
from facebook_business.session import FacebookSession as FacebookSession
from facebook_business.typechecker import TypeChecker as TypeChecker
from facebook_business.utils import api_utils as api_utils, urls as urls
from typing import Any, Optional

class FacebookResponse:
    def __init__(self, body: Optional[Any] = ..., http_status: Optional[Any] = ..., headers: Optional[Any] = ..., call: Optional[Any] = ...) -> None: ...
    def body(self): ...
    def json(self): ...
    def headers(self): ...
    def etag(self): ...
    def status(self): ...
    def is_success(self): ...
    def is_failure(self): ...
    def error(self): ...

class FacebookAdsApi:
    SDK_VERSION: Any = ...
    API_VERSION: Any = ...
    HTTP_METHOD_GET: str = ...
    HTTP_METHOD_POST: str = ...
    HTTP_METHOD_DELETE: str = ...
    HTTP_DEFAULT_HEADERS: Any = ...
    def __init__(self, session: Any, api_version: Optional[Any] = ..., enable_debug_logger: bool = ...) -> None: ...
    def get_num_requests_attempted(self): ...
    def get_num_requests_succeeded(self): ...
    @classmethod
    def init(cls, app_id: Optional[Any] = ..., app_secret: Optional[Any] = ..., access_token: Optional[Any] = ..., account_id: Optional[Any] = ..., api_version: Optional[Any] = ..., proxies: Optional[Any] = ..., timeout: Optional[Any] = ..., debug: bool = ..., crash_log: bool = ...): ...
    @classmethod
    def set_default_api(cls, api_instance: Any) -> None: ...
    @classmethod
    def get_default_api(cls): ...
    @classmethod
    def set_default_account_id(cls, account_id: Any) -> None: ...
    @classmethod
    def get_default_account_id(cls): ...
    def call(self, method: Any, path: Any, params: Optional[Any] = ..., headers: Optional[Any] = ..., files: Optional[Any] = ..., url_override: Optional[Any] = ..., api_version: Optional[Any] = ...): ...
    def new_batch(self): ...

class FacebookAdsApiBatch:
    def __init__(self, api: Any, success: Optional[Any] = ..., failure: Optional[Any] = ...) -> None: ...
    def __len__(self): ...
    def add(self, method: Any, relative_path: Any, params: Optional[Any] = ..., headers: Optional[Any] = ..., files: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., request: Optional[Any] = ...): ...
    def add_request(self, request: Any, success: Optional[Any] = ..., failure: Optional[Any] = ...): ...
    def execute(self): ...

class FacebookRequest:
    def __init__(self, node_id: Any, method: Any, endpoint: Any, api: Optional[Any] = ..., param_checker: Any = ..., target_class: Optional[Any] = ..., api_type: Optional[Any] = ..., allow_file_upload: bool = ..., response_parser: Optional[Any] = ..., include_summary: bool = ..., api_version: Optional[Any] = ...) -> None: ...
    def add_file(self, file_path: Any): ...
    def add_files(self, files: Any): ...
    def add_field(self, field: Any): ...
    def add_fields(self, fields: Any): ...
    def add_param(self, key: Any, value: Any): ...
    def add_params(self, params: Any): ...
    def get_fields(self): ...
    def get_params(self): ...
    def execute(self): ...
    def add_to_batch(self, batch: Any, success: Optional[Any] = ..., failure: Optional[Any] = ...) -> None: ...

class Cursor:
    params: Any = ...
    def __init__(self, source_object: Optional[Any] = ..., target_objects_class: Optional[Any] = ..., fields: Optional[Any] = ..., params: Optional[Any] = ..., include_summary: bool = ..., api: Optional[Any] = ..., node_id: Optional[Any] = ..., endpoint: Optional[Any] = ..., object_parser: Optional[Any] = ...) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def __next__(self): ...
    next: Any = ...
    def __getitem__(self, index: Any): ...
    def headers(self): ...
    def total(self): ...
    def summary(self): ...
    def load_next_page(self): ...
    def get_one(self): ...
    def build_objects_from_response(self, response: Any): ...

def open_files(files: Any) -> None: ...
