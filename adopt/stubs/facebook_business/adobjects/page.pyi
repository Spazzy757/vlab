from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.typechecker import TypeChecker as TypeChecker
from typing import Any, Optional

class Page(AbstractCrudObject):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    class Field(AbstractObject.Field):
        about: str = ...
        access_token: str = ...
        ad_campaign: str = ...
        affiliation: str = ...
        app_id: str = ...
        artists_we_like: str = ...
        attire: str = ...
        awards: str = ...
        band_interests: str = ...
        band_members: str = ...
        best_page: str = ...
        bio: str = ...
        birthday: str = ...
        booking_agent: str = ...
        built: str = ...
        business: str = ...
        can_checkin: str = ...
        can_post: str = ...
        category: str = ...
        category_list: str = ...
        checkins: str = ...
        company_overview: str = ...
        connected_instagram_account: str = ...
        contact_address: str = ...
        copyright_whitelisted_ig_partners: str = ...
        country_page_likes: str = ...
        cover: str = ...
        culinary_team: str = ...
        current_location: str = ...
        delivery_and_pickup_option_info: str = ...
        description: str = ...
        description_html: str = ...
        differently_open_offerings: str = ...
        directed_by: str = ...
        display_subtext: str = ...
        displayed_message_response_time: str = ...
        emails: str = ...
        engagement: str = ...
        fan_count: str = ...
        featured_video: str = ...
        features: str = ...
        food_styles: str = ...
        founded: str = ...
        general_info: str = ...
        general_manager: str = ...
        genre: str = ...
        global_brand_page_name: str = ...
        global_brand_root_id: str = ...
        has_added_app: str = ...
        has_whatsapp_business_number: str = ...
        has_whatsapp_number: str = ...
        hometown: str = ...
        hours: str = ...
        id: str = ...
        impressum: str = ...
        influences: str = ...
        instagram_business_account: str = ...
        instant_articles_review_status: str = ...
        is_always_open: str = ...
        is_chain: str = ...
        is_community_page: str = ...
        is_eligible_for_branded_content: str = ...
        is_messenger_bot_get_started_enabled: str = ...
        is_messenger_platform_bot: str = ...
        is_owned: str = ...
        is_permanently_closed: str = ...
        is_published: str = ...
        is_unclaimed: str = ...
        is_verified: str = ...
        is_webhooks_subscribed: str = ...
        keywords: str = ...
        leadgen_tos_acceptance_time: str = ...
        leadgen_tos_accepted: str = ...
        leadgen_tos_accepting_user: str = ...
        link: str = ...
        location: str = ...
        members: str = ...
        merchant_id: str = ...
        merchant_review_status: str = ...
        messenger_ads_default_icebreakers: str = ...
        messenger_ads_default_page_welcome_message: str = ...
        messenger_ads_default_quick_replies: str = ...
        messenger_ads_quick_replies_type: str = ...
        mission: str = ...
        mpg: str = ...
        name: str = ...
        name_with_location_descriptor: str = ...
        network: str = ...
        new_like_count: str = ...
        offer_eligible: str = ...
        overall_star_rating: str = ...
        page_about_story: str = ...
        page_token: str = ...
        parent_page: str = ...
        parking: str = ...
        payment_options: str = ...
        personal_info: str = ...
        personal_interests: str = ...
        pharma_safety_info: str = ...
        phone: str = ...
        place_type: str = ...
        plot_outline: str = ...
        preferred_audience: str = ...
        press_contact: str = ...
        price_range: str = ...
        privacy_info_url: str = ...
        produced_by: str = ...
        products: str = ...
        promotion_eligible: str = ...
        promotion_ineligible_reason: str = ...
        public_transit: str = ...
        rating_count: str = ...
        recipient: str = ...
        record_label: str = ...
        release_date: str = ...
        restaurant_services: str = ...
        restaurant_specialties: str = ...
        schedule: str = ...
        screenplay_by: str = ...
        season: str = ...
        single_line_address: str = ...
        starring: str = ...
        start_info: str = ...
        store_code: str = ...
        store_location_descriptor: str = ...
        store_number: str = ...
        studio: str = ...
        supports_donate_button_in_live_video: str = ...
        supports_instant_articles: str = ...
        talking_about_count: str = ...
        temporary_status: str = ...
        unread_message_count: str = ...
        unread_notif_count: str = ...
        unseen_message_count: str = ...
        username: str = ...
        verification_status: str = ...
        voip_info: str = ...
        website: str = ...
        were_here_count: str = ...
        whatsapp_number: str = ...
        written_by: str = ...
    class Attire:
        casual: str = ...
        dressy: str = ...
        unspecified: str = ...
    class FoodStyles:
        afghani: str = ...
        american_new_: str = ...
        american_traditional_: str = ...
        asian_fusion: str = ...
        barbeque: str = ...
        brazilian: str = ...
        breakfast: str = ...
        british: str = ...
        brunch: str = ...
        buffets: str = ...
        burgers: str = ...
        burmese: str = ...
        cajun_creole: str = ...
        caribbean: str = ...
        chinese: str = ...
        creperies: str = ...
        cuban: str = ...
        delis: str = ...
        diners: str = ...
        ethiopian: str = ...
        fast_food: str = ...
        filipino: str = ...
        fondue: str = ...
        food_stands: str = ...
        french: str = ...
        german: str = ...
        greek_and_mediterranean: str = ...
        hawaiian: str = ...
        himalayan_nepalese: str = ...
        hot_dogs: str = ...
        indian_pakistani: str = ...
        irish: str = ...
        italian: str = ...
        japanese: str = ...
        korean: str = ...
        latin_american: str = ...
        mexican: str = ...
        middle_eastern: str = ...
        moroccan: str = ...
        pizza: str = ...
        russian: str = ...
        sandwiches: str = ...
        seafood: str = ...
        singaporean: str = ...
        soul_food: str = ...
        southern: str = ...
        spanish_basque: str = ...
        steakhouses: str = ...
        sushi_bars: str = ...
        taiwanese: str = ...
        tapas_bars: str = ...
        tex_mex: str = ...
        thai: str = ...
        turkish: str = ...
        vegan: str = ...
        vegetarian: str = ...
        vietnamese: str = ...
    class TemporaryStatus:
        differently_open: str = ...
        no_data: str = ...
        operating_as_usual: str = ...
        temporarily_closed: str = ...
    class PermittedTasks:
        advertise: str = ...
        analyze: str = ...
        cashier_role: str = ...
        create_content: str = ...
        manage: str = ...
        manage_jobs: str = ...
        manage_leads: str = ...
        moderate: str = ...
        moderate_community: str = ...
        pages_messaging: str = ...
        pages_messaging_subscriptions: str = ...
        profile_plus_advertise: str = ...
        profile_plus_analyze: str = ...
        profile_plus_create_content: str = ...
        profile_plus_manage: str = ...
        profile_plus_messaging: str = ...
        profile_plus_moderate: str = ...
        read_page_mailboxes: str = ...
        view_monetization_insights: str = ...
    class Tasks:
        advertise: str = ...
        analyze: str = ...
        cashier_role: str = ...
        create_content: str = ...
        manage: str = ...
        manage_jobs: str = ...
        manage_leads: str = ...
        moderate: str = ...
        moderate_community: str = ...
        pages_messaging: str = ...
        pages_messaging_subscriptions: str = ...
        profile_plus_advertise: str = ...
        profile_plus_analyze: str = ...
        profile_plus_create_content: str = ...
        profile_plus_manage: str = ...
        profile_plus_messaging: str = ...
        profile_plus_moderate: str = ...
        read_page_mailboxes: str = ...
        view_monetization_insights: str = ...
    class BackdatedTimeGranularity:
        day: str = ...
        hour: str = ...
        min: str = ...
        month: str = ...
        none: str = ...
        year: str = ...
    class CheckinEntryPoint:
        branding_checkin: str = ...
        branding_other: str = ...
        branding_photo: str = ...
        branding_status: str = ...
    class Formatting:
        markdown: str = ...
        plaintext: str = ...
    class PlaceAttachmentSetting:
        value_1: str = ...
        value_2: str = ...
    class PostSurfacesBlacklist:
        value_1: str = ...
        value_2: str = ...
        value_3: str = ...
        value_4: str = ...
        value_5: str = ...
    class PostingToRedspace:
        disabled: str = ...
        enabled: str = ...
    class TargetSurface:
        story: str = ...
        timeline: str = ...
    class UnpublishedContentType:
        ads_post: str = ...
        draft: str = ...
        inline_created: str = ...
        published: str = ...
        reviewable_branded_content: str = ...
        scheduled: str = ...
        scheduled_recurring: str = ...
    class PublishStatus:
        draft: str = ...
        live: str = ...
    class MessagingType:
        message_tag: str = ...
        response: str = ...
        update: str = ...
    class NotificationType:
        no_push: str = ...
        regular: str = ...
        silent_push: str = ...
    class SenderAction:
        mark_seen: str = ...
        react: str = ...
        typing_off: str = ...
        typing_on: str = ...
        unreact: str = ...
    class Model:
        arabic: str = ...
        chinese: str = ...
        croatian: str = ...
        custom: str = ...
        danish: str = ...
        dutch: str = ...
        english: str = ...
        french_standard: str = ...
        georgian: str = ...
        german_standard: str = ...
        greek: str = ...
        hebrew: str = ...
        hungarian: str = ...
        irish: str = ...
        italian_standard: str = ...
        korean: str = ...
        norwegian_bokmal: str = ...
        polish: str = ...
        portuguese: str = ...
        romanian: str = ...
        spanish: str = ...
        swedish: str = ...
        vietnamese: str = ...
    class SubscribedFields:
        affiliation: str = ...
        attire: str = ...
        awards: str = ...
        bio: str = ...
        birthday: str = ...
        branded_camera: str = ...
        category: str = ...
        checkins: str = ...
        commerce_order: str = ...
        company_overview: str = ...
        conversations: str = ...
        culinary_team: str = ...
        current_location: str = ...
        description: str = ...
        email: str = ...
        feature_access_list: str = ...
        feed: str = ...
        founded: str = ...
        general_info: str = ...
        general_manager: str = ...
        hometown: str = ...
        hours: str = ...
        inbox_labels: str = ...
        invoice_access_invoice_change: str = ...
        invoice_access_onboarding_status_active: str = ...
        leadgen: str = ...
        leadgen_fat: str = ...
        live_videos: str = ...
        location: str = ...
        mcom_invoice_change: str = ...
        members: str = ...
        mention: str = ...
        merchant_review: str = ...
        message_deliveries: str = ...
        message_echoes: str = ...
        message_mention: str = ...
        message_reactions: str = ...
        message_reads: str = ...
        messages: str = ...
        messaging_account_linking: str = ...
        messaging_appointments: str = ...
        messaging_checkout_updates: str = ...
        messaging_direct_sends: str = ...
        messaging_fblogin_account_linking: str = ...
        messaging_game_plays: str = ...
        messaging_handovers: str = ...
        messaging_optins: str = ...
        messaging_optouts: str = ...
        messaging_page_feedback: str = ...
        messaging_payments: str = ...
        messaging_policy_enforcement: str = ...
        messaging_postbacks: str = ...
        messaging_pre_checkouts: str = ...
        messaging_referrals: str = ...
        mission: str = ...
        name: str = ...
        page_about_story: str = ...
        page_change_proposal: str = ...
        page_upcoming_change: str = ...
        parking: str = ...
        payment_options: str = ...
        personal_info: str = ...
        personal_interests: str = ...
        phone: str = ...
        picture: str = ...
        price_range: str = ...
        product_review: str = ...
        products: str = ...
        public_transit: str = ...
        publisher_subscriptions: str = ...
        ratings: str = ...
        registration: str = ...
        standby: str = ...
        user_action: str = ...
        video_text_question_responses: str = ...
        videos: str = ...
        website: str = ...
    class DomainActionType:
        add: str = ...
        remove: str = ...
    class PaymentDevModeAction:
        add: str = ...
        remove: str = ...
    class SettingType:
        account_linking: str = ...
        call_to_actions: str = ...
        domain_whitelisting: str = ...
        greeting: str = ...
        payment: str = ...
    class ThreadState:
        existing_thread: str = ...
        new_thread: str = ...
    @classmethod
    def get_endpoint(cls): ...
    def api_get(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_update(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_acknowledge_order(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ads_posts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_agencies(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_agencies(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_agency(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_albums(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_assigned_users(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_assigned_users(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_assigned_user(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_blocked(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_blocked(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_blocked(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_call_to_actions(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_canvas_elements(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_canvas_element(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_canvases(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_canvase(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_claimed_urls(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_claimed_urls(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_claimed_url(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_commerce_merchant_settings(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_commerce_orders(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_commerce_payouts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_commerce_transactions(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_conversations(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_copyright_manual_claim(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_copyright_whitelisted_partners(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_crosspost_whitelisted_pages(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_custom_labels(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_custom_label(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_custom_user_settings(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_custom_user_settings(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_custom_user_setting(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_events(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_feed(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_feed(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_global_brand_children(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_indexed_videos(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_insights(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., is_async: bool = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_instagram_accounts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_instant_articles(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_instant_article(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_instant_articles_insights(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_instant_articles_publish(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_lead_gen_forms(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_lead_gen_form(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_likes(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_live_encoders(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_live_encoder(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_live_videos(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_live_video(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_locations(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_locations(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_location(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_media_fingerprints(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_media_fingerprint(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_message_attachment(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_message(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_messaging_feature_review(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_messenger_ads_page_welcome_messages(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_messenger_profile(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_messenger_profile(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_messenger_profile(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_native_offers(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_native_offer(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_nlp_config(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_page_about_story(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_page_backed_instagram_accounts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_page_backed_instagram_account(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_page_whatsapp_number_verification(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_pass_thread_control(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_personas(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_persona(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_photos(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_photo(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_picture(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_picture(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_place_topics(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_posts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_product_catalogs(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_published_posts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ratings(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_request_thread_control(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_roles(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_rtb_dynamic_posts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_scheduled_posts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_secondary_receivers(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_settings(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_setting(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_shop_setup_status(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_subscribed_apps(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_subscribed_apps(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_subscribed_app(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_tabs(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_tabs(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_tab(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_tagged(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_take_thread_control(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_thread_owner(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_thread_settings(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_thread_setting(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_threads(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_tours(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_unlink_account(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_video_copyright_rules(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_video_copyright(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_video_lists(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_videos(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_video(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_visitor_posts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
