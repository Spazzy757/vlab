from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.mixins import CanValidate as CanValidate, HasAdLabels as HasAdLabels
from facebook_business.typechecker import TypeChecker as TypeChecker
from typing import Any, Optional

class AdSet(AbstractCrudObject, HasAdLabels, CanValidate):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    class Field(AbstractObject.Field):
        account_id: str = ...
        adlabels: str = ...
        adset_schedule: str = ...
        asset_feed_id: str = ...
        attribution_spec: str = ...
        bid_adjustments: str = ...
        bid_amount: str = ...
        bid_constraints: str = ...
        bid_info: str = ...
        bid_strategy: str = ...
        billing_event: str = ...
        budget_remaining: str = ...
        campaign: str = ...
        campaign_id: str = ...
        configured_status: str = ...
        created_time: str = ...
        creative_sequence: str = ...
        daily_budget: str = ...
        daily_min_spend_target: str = ...
        daily_spend_cap: str = ...
        destination_type: str = ...
        effective_status: str = ...
        end_time: str = ...
        frequency_control_specs: str = ...
        full_funnel_exploration_mode: str = ...
        id: str = ...
        instagram_actor_id: str = ...
        is_dynamic_creative: str = ...
        issues_info: str = ...
        learning_stage_info: str = ...
        lifetime_budget: str = ...
        lifetime_imps: str = ...
        lifetime_min_spend_target: str = ...
        lifetime_spend_cap: str = ...
        multi_optimization_goal_weight: str = ...
        name: str = ...
        optimization_goal: str = ...
        optimization_sub_event: str = ...
        pacing_type: str = ...
        promoted_object: str = ...
        recommendations: str = ...
        recurring_budget_semantics: str = ...
        review_feedback: str = ...
        rf_prediction_id: str = ...
        source_adset: str = ...
        source_adset_id: str = ...
        start_time: str = ...
        status: str = ...
        targeting: str = ...
        time_based_ad_rotation_id_blocks: str = ...
        time_based_ad_rotation_intervals: str = ...
        updated_time: str = ...
        use_new_app_click: str = ...
        campaign_spec: str = ...
        daily_imps: str = ...
        date_format: str = ...
        execution_options: str = ...
        line_number: str = ...
        rb_prediction_id: str = ...
        time_start: str = ...
        time_stop: str = ...
        topline_id: str = ...
        tune_for_category: str = ...
        upstream_events: str = ...
    class BidStrategy:
        cost_cap: str = ...
        lowest_cost_without_cap: str = ...
        lowest_cost_with_bid_cap: str = ...
        target_cost: str = ...
    class BillingEvent:
        app_installs: str = ...
        clicks: str = ...
        impressions: str = ...
        link_clicks: str = ...
        none: str = ...
        offer_claims: str = ...
        page_likes: str = ...
        post_engagement: str = ...
        thruplay: str = ...
    class ConfiguredStatus:
        active: str = ...
        archived: str = ...
        deleted: str = ...
        paused: str = ...
    class EffectiveStatus:
        active: str = ...
        archived: str = ...
        campaign_paused: str = ...
        deleted: str = ...
        in_process: str = ...
        paused: str = ...
        with_issues: str = ...
    class OptimizationGoal:
        ad_recall_lift: str = ...
        app_downloads: str = ...
        app_installs: str = ...
        brand_awareness: str = ...
        clicks: str = ...
        derived_events: str = ...
        engaged_users: str = ...
        event_responses: str = ...
        impressions: str = ...
        landing_page_views: str = ...
        lead_generation: str = ...
        link_clicks: str = ...
        none: str = ...
        offer_claims: str = ...
        offsite_conversions: str = ...
        page_engagement: str = ...
        page_likes: str = ...
        post_engagement: str = ...
        reach: str = ...
        replies: str = ...
        social_impressions: str = ...
        thruplay: str = ...
        two_second_continuous_video_views: str = ...
        value: str = ...
        visit_instagram_profile: str = ...
    class Status:
        active: str = ...
        archived: str = ...
        deleted: str = ...
        paused: str = ...
    class DatePreset:
        last_14d: str = ...
        last_28d: str = ...
        last_30d: str = ...
        last_3d: str = ...
        last_7d: str = ...
        last_90d: str = ...
        last_month: str = ...
        last_quarter: str = ...
        last_week_mon_sun: str = ...
        last_week_sun_sat: str = ...
        last_year: str = ...
        lifetime: str = ...
        this_month: str = ...
        this_quarter: str = ...
        this_week_mon_today: str = ...
        this_week_sun_today: str = ...
        this_year: str = ...
        today: str = ...
        yesterday: str = ...
    class DestinationType:
        app: str = ...
        applinks_automatic: str = ...
        facebook: str = ...
        messenger: str = ...
        undefined: str = ...
        website: str = ...
    class ExecutionOptions:
        include_recommendations: str = ...
        validate_only: str = ...
    class FullFunnelExplorationMode:
        extended_exploration: str = ...
        limited_exploration: str = ...
        none_exploration: str = ...
    class MultiOptimizationGoalWeight:
        balanced: str = ...
        prefer_event: str = ...
        prefer_install: str = ...
        undefined: str = ...
    class OptimizationSubEvent:
        none: str = ...
        travel_intent: str = ...
        travel_intent_bucket_01: str = ...
        travel_intent_bucket_02: str = ...
        travel_intent_bucket_03: str = ...
        travel_intent_bucket_04: str = ...
        travel_intent_bucket_05: str = ...
        travel_intent_no_destination_intent: str = ...
        trip_consideration: str = ...
        video_sound_on: str = ...
    class TuneForCategory:
        credit: str = ...
        employment: str = ...
        housing: str = ...
        none: str = ...
    class Operator:
        all: str = ...
        any: str = ...
    class StatusOption:
        active: str = ...
        inherited_from_source: str = ...
        paused: str = ...
    @classmethod
    def get_endpoint(cls): ...
    def api_create(self, parent_id: Any, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_delete(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_get(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_update(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_activities(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ad_studies(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ad_creatives(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_ad_labels(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_ad_label(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ad_rules_governed(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ads(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_async_ad_requests(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_content_delivery_report(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_copies(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_copy(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_delivery_estimate(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_insights(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., is_async: bool = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_insights_async(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_targeting_sentence_lines(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
