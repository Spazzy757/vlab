from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.typechecker import TypeChecker as TypeChecker
from typing import Any, Optional

class AdVideo(AbstractCrudObject):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    class Field(AbstractObject.Field):
        ad_breaks: str = ...
        backdated_time: str = ...
        backdated_time_granularity: str = ...
        content_category: str = ...
        content_tags: str = ...
        copyright: str = ...
        copyright_monitoring_status: str = ...
        created_time: str = ...
        custom_labels: str = ...
        description: str = ...
        embed_html: str = ...
        embeddable: str = ...
        event: str = ...
        expiration: str = ...
        format: str = ...
        field_from: str = ...
        icon: str = ...
        id: str = ...
        is_crosspost_video: str = ...
        is_crossposting_eligible: str = ...
        is_episode: str = ...
        is_instagram_eligible: str = ...
        is_reference_only: str = ...
        length: str = ...
        live_audience_count: str = ...
        live_status: str = ...
        music_video_copyright: str = ...
        permalink_url: str = ...
        picture: str = ...
        place: str = ...
        premiere_living_room_status: str = ...
        privacy: str = ...
        published: str = ...
        scheduled_publish_time: str = ...
        source: str = ...
        spherical: str = ...
        status: str = ...
        title: str = ...
        universal_video_id: str = ...
        updated_time: str = ...
        adaptive_type: str = ...
        animated_effect_id: str = ...
        application_id: str = ...
        asked_fun_fact_prompt_id: str = ...
        attribution_app_id: str = ...
        audio_story_wave_animation_handle: str = ...
        chunk_session_id: str = ...
        composer_entry_picker: str = ...
        composer_entry_point: str = ...
        composer_entry_time: str = ...
        composer_session_events_log: str = ...
        composer_session_id: str = ...
        composer_source_surface: str = ...
        composer_type: str = ...
        container_type: str = ...
        end_offset: str = ...
        fbuploader_video_file_chunk: str = ...
        file_size: str = ...
        file_url: str = ...
        fisheye_video_cropped: str = ...
        formatting: str = ...
        fov: str = ...
        front_z_rotation: str = ...
        fun_fact_prompt_id: str = ...
        fun_fact_toastee_id: str = ...
        guide: str = ...
        guide_enabled: str = ...
        has_nickname: str = ...
        holiday_card: str = ...
        initial_heading: str = ...
        initial_pitch: str = ...
        instant_game_entry_point_data: str = ...
        is_boost_intended: str = ...
        is_group_linking_post: str = ...
        is_voice_clip: str = ...
        location_source_id: str = ...
        name: str = ...
        offer_like_post_id: str = ...
        og_action_type_id: str = ...
        og_icon_id: str = ...
        og_object_id: str = ...
        og_phrase: str = ...
        og_suggestion_mechanism: str = ...
        original_fov: str = ...
        original_projection_type: str = ...
        publish_event_id: str = ...
        react_mode_metadata: str = ...
        referenced_sticker_id: str = ...
        replace_video_id: str = ...
        sales_promo_id: str = ...
        slideshow_spec: str = ...
        start_offset: str = ...
        swap_mode: str = ...
        text_format_metadata: str = ...
        throwback_camera_roll_media: str = ...
        thumb: str = ...
        time_since_original_post: str = ...
        transcode_setting_properties: str = ...
        unpublished_content_type: str = ...
        upload_phase: str = ...
        upload_session_id: str = ...
        upload_setting_properties: str = ...
        video_file_chunk: str = ...
        video_start_time_ms: str = ...
        waterfall_id: str = ...
        ad_placements_validation_only: str = ...
        creative_folder_id: str = ...
        validation_ad_placements: str = ...
        filename: str = ...
        filepath: str = ...
    class ContainerType:
        aco_video_variation: str = ...
        ad_break_preview: str = ...
        ad_derivative: str = ...
        age_up: str = ...
        album_multimedia_post: str = ...
        aloha_call_video: str = ...
        aloha_superframe: str = ...
        app_review_screencast: str = ...
        atlas_video: str = ...
        audio_broadcast: str = ...
        bell_poll: str = ...
        brand_equity_poll_video: str = ...
        broadcast: str = ...
        candidate_videos: str = ...
        canvas: str = ...
        cfc_video: str = ...
        contained_post_attachment: str = ...
        contained_post_audio_broadcast: str = ...
        contained_post_broadcast: str = ...
        copyright_reference_broadcast: str = ...
        copyright_reference_video: str = ...
        cultural_moment_deprecated: str = ...
        dco_ad_asset_feed: str = ...
        dco_autogen_video: str = ...
        dco_trimmed_video: str = ...
        dim_sum: str = ...
        directed_post_attachment: str = ...
        direct_inbox: str = ...
        direct_inbox_reaction: str = ...
        dynamic_item_display_bundle: str = ...
        dynamic_item_video: str = ...
        dynamic_template_video: str = ...
        event_cover_video: str = ...
        event_tour: str = ...
        facecast_dvr: str = ...
        fb_shorts: str = ...
        fundraiser_cover_video: str = ...
        game_clip: str = ...
        gaming_update_video: str = ...
        gemstone: str = ...
        goodwill_anniversary_deprecated: str = ...
        goodwill_anniversary_promotion_deprecated: str = ...
        goodwill_video_contained_share: str = ...
        goodwill_video_promotion: str = ...
        goodwill_video_share: str = ...
        goodwill_video_token_required: str = ...
        group_post: str = ...
        heuristic_cluster_video: str = ...
        heuristic_preview: str = ...
        highlight_clip_video: str = ...
        inspiration_video: str = ...
        instagram_video_copy: str = ...
        instant_application_preview: str = ...
        instant_article: str = ...
        instant_game_clip: str = ...
        issue_module: str = ...
        job_application_video: str = ...
        job_opening_video: str = ...
        kototoro: str = ...
        learn: str = ...
        legacy: str = ...
        live_creative_kit_video: str = ...
        live_linear_video_channel_internal_broadcast: str = ...
        live_photo: str = ...
        look_now_deprecated: str = ...
        marketplace_listing_video: str = ...
        marketplace_pre_recorded_video: str = ...
        moments_video: str = ...
        neo_async_game_video: str = ...
        no_story: str = ...
        oculus_creator_portal: str = ...
        oculus_venues_broadcast: str = ...
        offers_video: str = ...
        pages_cover_video: str = ...
        page_review_screencast: str = ...
        page_slideshow_video: str = ...
        pixelcloud: str = ...
        premiere_source: str = ...
        private_gallery_video: str = ...
        product_video: str = ...
        profile_cover_video: str = ...
        profile_intro_card: str = ...
        profile_to_page_uploaded_video: str = ...
        profile_video: str = ...
        proton: str = ...
        quick_promotion: str = ...
        replace_video: str = ...
        sales_client_interaction: str = ...
        say_thanks_deprecated: str = ...
        showreel_native_dummy_video: str = ...
        slideshow_animoto: str = ...
        slideshow_shakr: str = ...
        slideshow_variation_video: str = ...
        sotto_content: str = ...
        sound_platform_stream: str = ...
        stories_video: str = ...
        storyline: str = ...
        storyline_with_external_music: str = ...
        story_archive_video: str = ...
        story_card_template: str = ...
        tarot_digest: str = ...
        temp_multimedia_post: str = ...
        unlisted: str = ...
        video_comment: str = ...
        video_creative_editor_autogen_ad_video: str = ...
        video_superres: str = ...
        woodhenge: str = ...
        your_day: str = ...
    class ContentCategory:
        beauty_fashion: str = ...
        business: str = ...
        cars_trucks: str = ...
        comedy: str = ...
        cute_animals: str = ...
        entertainment: str = ...
        family: str = ...
        food_health: str = ...
        home: str = ...
        lifestyle: str = ...
        music: str = ...
        news: str = ...
        other: str = ...
        politics: str = ...
        science: str = ...
        sports: str = ...
        technology: str = ...
        video_gaming: str = ...
    class Formatting:
        markdown: str = ...
        plaintext: str = ...
    class OriginalProjectionType:
        cubemap: str = ...
        equiangular_cubemap: str = ...
        equirectangular: str = ...
        half_equirectangular: str = ...
    class SwapMode:
        replace: str = ...
    class UnpublishedContentType:
        ads_post: str = ...
        draft: str = ...
        inline_created: str = ...
        published: str = ...
        reviewable_branded_content: str = ...
        scheduled: str = ...
        scheduled_recurring: str = ...
    class UploadPhase:
        cancel: str = ...
        finish: str = ...
        start: str = ...
        transfer: str = ...
    class ValidationAdPlacements:
        audience_network_instream_video: str = ...
        audience_network_instream_video_mobile: str = ...
        audience_network_rewarded_video: str = ...
        desktop_feed_standard: str = ...
        facebook_story_mobile: str = ...
        instagram_standard: str = ...
        instagram_story: str = ...
        instant_article_standard: str = ...
        instream_video_desktop: str = ...
        instream_video_image: str = ...
        instream_video_mobile: str = ...
        messenger_mobile_inbox_media: str = ...
        messenger_mobile_story_media: str = ...
        mobile_feed_standard: str = ...
        mobile_fullwidth: str = ...
        mobile_interstitial: str = ...
        mobile_medium_rectangle: str = ...
        mobile_native: str = ...
        right_column_standard: str = ...
        suggested_video_mobile: str = ...
    class Type:
        tagged: str = ...
        uploaded: str = ...
    class BackdatedTimeGranularity:
        day: str = ...
        hour: str = ...
        min: str = ...
        month: str = ...
        none: str = ...
        year: str = ...
    @classmethod
    def get_endpoint(cls): ...
    def api_create(self, parent_id: Any, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_delete(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_get(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_update(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_captions(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_caption(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_comments(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_comment(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_crosspost_shared_pages(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_likes(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_like(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_poll_settings(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_polls(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_poll(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_shared_posts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_sponsor_tags(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_tags(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_tag(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_thumbnails(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_thumbnail(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_video_insights(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def remote_create(self, batch: Optional[Any] = ..., failure: Optional[Any] = ..., params: Optional[Any] = ..., success: Optional[Any] = ...): ...
    def waitUntilEncodingReady(self, interval: int = ..., timeout: int = ...) -> None: ...
