from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import Cursor as Cursor, FacebookAdsApi as FacebookAdsApi, FacebookRequest as FacebookRequest
from facebook_business.exceptions import FacebookBadObjectError as FacebookBadObjectError
from typing import Any, Optional

class AbstractCrudObject(AbstractObject):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    def __setitem__(self, key: Any, value: Any): ...
    def __delitem__(self, key: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    @classmethod
    def get_by_ids(cls, ids: Any, params: Optional[Any] = ..., fields: Optional[Any] = ..., api: Optional[Any] = ...): ...
    def get_id(self): ...
    def get_parent_id(self): ...
    def get_api(self): ...
    def get_id_assured(self): ...
    def get_parent_id_assured(self): ...
    def get_api_assured(self): ...
    def export_changed_data(self): ...
    def export_data(self): ...
    def clear_id(self): ...
    def get_node_path(self): ...
    def get_node_path_string(self): ...
    def remote_create(self, batch: Optional[Any] = ..., failure: Optional[Any] = ..., files: Optional[Any] = ..., params: Optional[Any] = ..., success: Optional[Any] = ..., api_version: Optional[Any] = ...): ...
    def remote_read(self, batch: Optional[Any] = ..., failure: Optional[Any] = ..., fields: Optional[Any] = ..., params: Optional[Any] = ..., success: Optional[Any] = ..., api_version: Optional[Any] = ...): ...
    def remote_update(self, batch: Optional[Any] = ..., failure: Optional[Any] = ..., files: Optional[Any] = ..., params: Optional[Any] = ..., success: Optional[Any] = ..., api_version: Optional[Any] = ...): ...
    def remote_delete(self, batch: Optional[Any] = ..., failure: Optional[Any] = ..., params: Optional[Any] = ..., success: Optional[Any] = ..., api_version: Optional[Any] = ...): ...
    def remote_save(self, *args: Any, **kwargs: Any): ...
    def remote_archive(self, batch: Optional[Any] = ..., failure: Optional[Any] = ..., success: Optional[Any] = ...): ...
    save: Any = ...
    def iterate_edge(self, target_objects_class: Any, fields: Optional[Any] = ..., params: Optional[Any] = ..., fetch_first_page: bool = ..., include_summary: bool = ..., endpoint: Optional[Any] = ...): ...
    def iterate_edge_async(self, target_objects_class: Any, fields: Optional[Any] = ..., params: Optional[Any] = ..., is_async: bool = ..., include_summary: bool = ..., endpoint: Optional[Any] = ...): ...
    def edge_object(self, target_objects_class: Any, fields: Optional[Any] = ..., params: Optional[Any] = ..., endpoint: Optional[Any] = ...): ...
    def assure_call(self) -> None: ...
