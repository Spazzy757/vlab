from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.typechecker import TypeChecker as TypeChecker
from typing import Any, Optional

class Vehicle(AbstractCrudObject):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    class Field(AbstractObject.Field):
        address: str = ...
        applinks: str = ...
        availability: str = ...
        body_style: str = ...
        condition: str = ...
        currency: str = ...
        custom_label_0: str = ...
        date_first_on_lot: str = ...
        dealer_communication_channel: str = ...
        dealer_email: str = ...
        dealer_id: str = ...
        dealer_name: str = ...
        dealer_phone: str = ...
        dealer_privacy_policy_url: str = ...
        description: str = ...
        drivetrain: str = ...
        exterior_color: str = ...
        fb_page_id: str = ...
        features: str = ...
        fuel_type: str = ...
        id: str = ...
        images: str = ...
        interior_color: str = ...
        legal_disclosure_impressum_url: str = ...
        make: str = ...
        mileage: str = ...
        model: str = ...
        previous_currency: str = ...
        previous_price: str = ...
        price: str = ...
        sale_currency: str = ...
        sale_price: str = ...
        sanitized_images: str = ...
        state_of_vehicle: str = ...
        title: str = ...
        transmission: str = ...
        trim: str = ...
        url: str = ...
        vehicle_id: str = ...
        vehicle_registration_plate: str = ...
        vehicle_specifications: str = ...
        vehicle_type: str = ...
        vin: str = ...
        year: str = ...
    class Availability:
        available: str = ...
        not_available: str = ...
    class BodyStyle:
        convertible: str = ...
        coupe: str = ...
        crossover: str = ...
        hatchback: str = ...
        minivan: str = ...
        none: str = ...
        other: str = ...
        sedan: str = ...
        small_car: str = ...
        suv: str = ...
        truck: str = ...
        van: str = ...
        wagon: str = ...
    class Condition:
        excellent: str = ...
        fair: str = ...
        good: str = ...
        none: str = ...
        other: str = ...
        poor: str = ...
        very_good: str = ...
    class Drivetrain:
        awd: str = ...
        four_wd: str = ...
        fwd: str = ...
        none: str = ...
        other: str = ...
        rwd: str = ...
        two_wd: str = ...
    class FuelType:
        diesel: str = ...
        electric: str = ...
        flex: str = ...
        gasoline: str = ...
        hybrid: str = ...
        none: str = ...
        other: str = ...
        petrol: str = ...
        plugin_hybrid: str = ...
    class StateOfVehicle:
        cpo: str = ...
        new: str = ...
        used: str = ...
    class Transmission:
        automatic: str = ...
        manual: str = ...
        none: str = ...
        other: str = ...
    class VehicleType:
        boat: str = ...
        car_truck: str = ...
        commercial: str = ...
        motorcycle: str = ...
        other: str = ...
        powersport: str = ...
        rv_camper: str = ...
        trailer: str = ...
    @classmethod
    def get_endpoint(cls): ...
    def api_create(self, parent_id: Any, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_get(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_update(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
