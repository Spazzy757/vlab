from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.typechecker import TypeChecker as TypeChecker
from typing import Any, Optional

class NativeOffer(AbstractCrudObject):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    class Field(AbstractObject.Field):
        barcode_photo: str = ...
        barcode_photo_uri: str = ...
        barcode_type: str = ...
        barcode_value: str = ...
        block_reshares: str = ...
        details: str = ...
        disable_location: str = ...
        discounts: str = ...
        expiration_time: str = ...
        id: str = ...
        instore_code: str = ...
        location_type: str = ...
        max_save_count: str = ...
        online_code: str = ...
        page: str = ...
        page_set_id: str = ...
        redemption_code: str = ...
        redemption_link: str = ...
        save_count: str = ...
        terms: str = ...
        title: str = ...
        total_unique_codes: str = ...
        unique_codes: str = ...
        unique_codes_file_code_type: str = ...
        unique_codes_file_name: str = ...
        unique_codes_file_upload_status: str = ...
    class UniqueCodesFileCodeType:
        barcodes: str = ...
        discount_and_barcodes: str = ...
        discount_and_discount: str = ...
        discount_codes: str = ...
        instore_barcodes: str = ...
        instore_discount_codes: str = ...
        online_discount_codes: str = ...
    class BarcodeType:
        code128: str = ...
        code128b: str = ...
        code93: str = ...
        databar: str = ...
        databar_expanded: str = ...
        databar_expanded_stacked: str = ...
        databar_limited: str = ...
        datamatrix: str = ...
        ean: str = ...
        pdf417: str = ...
        qr: str = ...
        upc_a: str = ...
        upc_e: str = ...
    class LocationType:
        both: str = ...
        offline: str = ...
        online: str = ...
    def api_get(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_code(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_native_offer_view(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_views(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
