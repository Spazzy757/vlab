from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.typechecker import TypeChecker as TypeChecker
from typing import Any, Optional

class AtlasCampaign(AbstractCrudObject):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    class Field(AbstractObject.Field):
        ad_platform: str = ...
        alias: str = ...
        cost_per_1k_impressions: str = ...
        cost_per_click: str = ...
        cost_per_visit: str = ...
        created_by: str = ...
        created_date: str = ...
        data_driven_convs: str = ...
        data_driven_convs_per_1k_impress: str = ...
        data_driven_convs_per_click: str = ...
        data_driven_convs_per_visit: str = ...
        data_driven_cpa: str = ...
        data_driven_nullable_convs: str = ...
        data_driven_revenue: str = ...
        data_driven_roas: str = ...
        even_credit_convs: str = ...
        even_credit_convs_per_1k_impress: str = ...
        even_credit_convs_per_click: str = ...
        even_credit_convs_per_visit: str = ...
        even_credit_cpa: str = ...
        even_credit_revenue: str = ...
        even_credit_roas: str = ...
        first_click_convs: str = ...
        first_click_convs_per_1k_impress: str = ...
        first_click_convs_per_click: str = ...
        first_click_convs_per_visit: str = ...
        first_click_cpa: str = ...
        first_click_revenue: str = ...
        first_click_roas: str = ...
        first_touch_convs: str = ...
        first_touch_convs_per_1k_impress: str = ...
        first_touch_convs_per_click: str = ...
        first_touch_convs_per_visit: str = ...
        first_touch_cpa: str = ...
        first_touch_revenue: str = ...
        first_touch_roas: str = ...
        id: str = ...
        is_archived: str = ...
        last_click_convs: str = ...
        last_click_convs_per_1k_impress: str = ...
        last_click_convs_per_click: str = ...
        last_click_convs_per_visit: str = ...
        last_click_cpa: str = ...
        last_click_revenue: str = ...
        last_click_roas: str = ...
        last_click_with_extrapolation_convs: str = ...
        last_click_with_extrapolation_convs_per_100_clicks: str = ...
        last_click_with_extrapolation_convs_per_1k_impress: str = ...
        last_click_with_extrapolation_convs_per_click: str = ...
        last_click_with_extrapolation_convs_per_visit: str = ...
        last_click_with_extrapolation_cpa: str = ...
        last_click_with_extrapolation_revenue: str = ...
        last_click_with_extrapolation_roas: str = ...
        last_click_with_extrapolation_unattributed: str = ...
        last_modified_by: str = ...
        last_modified_date: str = ...
        last_touch_convs: str = ...
        last_touch_convs_per_1k_impress: str = ...
        last_touch_convs_per_click: str = ...
        last_touch_convs_per_visit: str = ...
        last_touch_cpa: str = ...
        last_touch_revenue: str = ...
        last_touch_roas: str = ...
        name: str = ...
        net_media_cost: str = ...
        positional_30fl_convs: str = ...
        positional_30fl_convs_per_1k_impress: str = ...
        positional_30fl_convs_per_click: str = ...
        positional_30fl_convs_per_visit: str = ...
        positional_30fl_cpa: str = ...
        positional_30fl_revenue: str = ...
        positional_30fl_roas: str = ...
        positional_40fl_convs: str = ...
        positional_40fl_convs_per_1k_impress: str = ...
        positional_40fl_convs_per_click: str = ...
        positional_40fl_convs_per_visit: str = ...
        positional_40fl_cpa: str = ...
        positional_40fl_revenue: str = ...
        positional_40fl_roas: str = ...
        report_click_through_rate: str = ...
        report_clicks: str = ...
        report_impressions: str = ...
        report_visits: str = ...
        time_decay_1day_convs: str = ...
        time_decay_1day_convs_per_1k_impress: str = ...
        time_decay_1day_convs_per_click: str = ...
        time_decay_1day_convs_per_visit: str = ...
        time_decay_1day_cpa: str = ...
        time_decay_1day_revenue: str = ...
        time_decay_1day_roas: str = ...
        time_decay_7day_convs: str = ...
        time_decay_7day_convs_per_1k_impress: str = ...
        time_decay_7day_convs_per_click: str = ...
        time_decay_7day_convs_per_visit: str = ...
        time_decay_7day_cpa: str = ...
        time_decay_7day_revenue: str = ...
        time_decay_7day_roas: str = ...
        type: str = ...
    def api_get(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ad_sets(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_business_unit(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_metrics_breakdown(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_sources(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
