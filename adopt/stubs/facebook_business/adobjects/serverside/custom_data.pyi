from facebook_business.adobjects.serverside.content import Content as Content
from facebook_business.adobjects.serverside.normalize import Normalize as Normalize
from typing import Any

class CustomData:
    param_types: Any = ...
    def __init__(self, value: str=..., currency: str=..., content_name: str=..., content_category: content_ids=..., content_ids: List[str]=..., contents: List[Content]=..., content_type: str=..., order_id: str=..., predicted_ltv: float=..., num_items: int=..., status: str=..., search_string: str=..., custom_properties: dict=...) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value: Any) -> None: ...
    @property
    def currency(self): ...
    @currency.setter
    def currency(self, currency: Any) -> None: ...
    @property
    def content_name(self): ...
    @content_name.setter
    def content_name(self, content_name: Any) -> None: ...
    @property
    def content_category(self): ...
    @content_category.setter
    def content_category(self, content_category: Any) -> None: ...
    @property
    def content_ids(self): ...
    @content_ids.setter
    def content_ids(self, content_ids: Any) -> None: ...
    @property
    def contents(self): ...
    @contents.setter
    def contents(self, contents: Any) -> None: ...
    @property
    def content_type(self): ...
    @content_type.setter
    def content_type(self, content_type: Any) -> None: ...
    @property
    def order_id(self): ...
    @order_id.setter
    def order_id(self, order_id: Any) -> None: ...
    @property
    def predicted_ltv(self): ...
    @predicted_ltv.setter
    def predicted_ltv(self, predicted_ltv: Any) -> None: ...
    @property
    def num_items(self): ...
    @num_items.setter
    def num_items(self, num_items: Any) -> None: ...
    @property
    def status(self): ...
    @status.setter
    def status(self, status: Any) -> None: ...
    @property
    def search_string(self): ...
    @search_string.setter
    def search_string(self, search_string: Any) -> None: ...
    @property
    def custom_properties(self): ...
    @custom_properties.setter
    def custom_properties(self, custom_properties: Any) -> None: ...
    def add_custom_property(self, key: Any, value: Any) -> None: ...
    def normalize(self): ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
