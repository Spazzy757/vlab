from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.typechecker import TypeChecker as TypeChecker
from typing import Any, Optional

class Application(AbstractCrudObject):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    class Field(AbstractObject.Field):
        aam_rules: str = ...
        an_ad_space_limit: str = ...
        an_platforms: str = ...
        android_key_hash: str = ...
        android_sdk_error_categories: str = ...
        app_domains: str = ...
        app_events_feature_bitmask: str = ...
        app_events_session_timeout: str = ...
        app_install_tracked: str = ...
        app_name: str = ...
        app_signals_binding_ios: str = ...
        app_type: str = ...
        auth_dialog_data_help_url: str = ...
        auth_dialog_headline: str = ...
        auth_dialog_perms_explanation: str = ...
        auth_referral_default_activity_privacy: str = ...
        auth_referral_enabled: str = ...
        auth_referral_extended_perms: str = ...
        auth_referral_friend_perms: str = ...
        auth_referral_response_type: str = ...
        auth_referral_user_perms: str = ...
        auto_event_mapping_android: str = ...
        auto_event_mapping_ios: str = ...
        auto_event_setup_enabled: str = ...
        canvas_fluid_height: str = ...
        canvas_fluid_width: str = ...
        canvas_url: str = ...
        category: str = ...
        client_config: str = ...
        company: str = ...
        configured_ios_sso: str = ...
        contact_email: str = ...
        created_time: str = ...
        creator_uid: str = ...
        daily_active_users: str = ...
        daily_active_users_rank: str = ...
        deauth_callback_url: str = ...
        default_share_mode: str = ...
        description: str = ...
        financial_id: str = ...
        gdpv4_chrome_custom_tabs_enabled: str = ...
        gdpv4_enabled: str = ...
        gdpv4_nux_content: str = ...
        gdpv4_nux_enabled: str = ...
        has_messenger_product: str = ...
        hosting_url: str = ...
        icon_url: str = ...
        id: str = ...
        ios_bundle_id: str = ...
        ios_sdk_dialog_flows: str = ...
        ios_sdk_error_categories: str = ...
        ios_sfvc_attr: str = ...
        ios_supports_native_proxy_auth_flow: str = ...
        ios_supports_system_auth: str = ...
        ipad_app_store_id: str = ...
        iphone_app_store_id: str = ...
        latest_sdk_version: str = ...
        link: str = ...
        logging_token: str = ...
        login_secret: str = ...
        logo_url: str = ...
        migrations: str = ...
        mobile_profile_section_url: str = ...
        mobile_web_url: str = ...
        monthly_active_users: str = ...
        monthly_active_users_rank: str = ...
        name: str = ...
        namespace: str = ...
        object_store_urls: str = ...
        page_tab_default_name: str = ...
        page_tab_url: str = ...
        photo_url: str = ...
        privacy_policy_url: str = ...
        profile_section_url: str = ...
        property_id: str = ...
        real_time_mode_devices: str = ...
        restrictions: str = ...
        restrictive_data_filter_params: str = ...
        restrictive_data_filter_rules: str = ...
        sdk_update_message: str = ...
        seamless_login: str = ...
        secure_canvas_url: str = ...
        secure_page_tab_url: str = ...
        server_ip_whitelist: str = ...
        smart_login_bookmark_icon_url: str = ...
        smart_login_menu_icon_url: str = ...
        social_discovery: str = ...
        subcategory: str = ...
        suggested_events_setting: str = ...
        supported_platforms: str = ...
        supports_apprequests_fast_app_switch: str = ...
        supports_attribution: str = ...
        supports_implicit_sdk_logging: str = ...
        suppress_native_ios_gdp: str = ...
        terms_of_service_url: str = ...
        url_scheme_suffix: str = ...
        user_support_email: str = ...
        user_support_url: str = ...
        website_url: str = ...
        weekly_active_users: str = ...
    class SupportedPlatforms:
        amazon: str = ...
        android: str = ...
        canvas: str = ...
        gameroom: str = ...
        instant_game: str = ...
        ipad: str = ...
        iphone: str = ...
        mobile_web: str = ...
        supplementary_images: str = ...
        web: str = ...
        windows: str = ...
    class AnPlatforms:
        android: str = ...
        desktop: str = ...
        instant_articles: str = ...
        ios: str = ...
        mobile_web: str = ...
        unknown: str = ...
    class Platform:
        android: str = ...
        ios: str = ...
    class RequestType:
        app_indexing: str = ...
        button_sampling: str = ...
        plugin: str = ...
    class MutationMethod:
        add: str = ...
        delete: str = ...
        replace: str = ...
    class PostMethod:
        codeless: str = ...
        eymt: str = ...
    class ScoreType:
        custom: str = ...
        numeric: str = ...
        time: str = ...
    class SortOrder:
        higher_is_better: str = ...
        lower_is_better: str = ...
    class LoggingSource:
        messenger_bot: str = ...
    class LoggingTarget:
        app: str = ...
        app_and_page: str = ...
        page: str = ...
    def api_get(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_update(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_accounts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_accounts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_account(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_activity(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ad_network_analytics(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_ad_network_analytic(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ad_network_analytics_results(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_agencies(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_app_event_types(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_app_indexing(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_app_indexing_session(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_app_insights(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_app_installed_groups(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_app_push_device_token(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_app_assets(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_asset(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_authorized_ad_accounts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_banned(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_button_auto_detection_device_selection(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_button_indexing(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_codeless_event_mapping(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_da_checks(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_events(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_insights_push_schedule(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_insights_push_schedule(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ios_dialog_configs(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_leaderboards_create(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_leaderboards_delete_entry(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_leaderboards_reset(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_leaderboards_set_score(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_mmp_auditing(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_mobile_sdk_gk(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_occludes_popup(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ozone_release(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_page_activity(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_payment_currencies(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_payment_currency(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_permissions(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_products(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_purchases(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_roles(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_subscribed_domains(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_subscribed_domain(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_subscribed_domains_phishing(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_subscribed_domains_phishing(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_subscriptions(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_subscription(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_upload(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_user_property(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
