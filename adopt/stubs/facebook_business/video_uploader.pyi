import abc
from abc import abstractmethod
from facebook_business.exceptions import FacebookError as FacebookError, FacebookRequestError as FacebookRequestError
from typing import Any, Optional

class VideoUploader:
    def __init__(self) -> None: ...
    def upload(self, video: Any, wait_for_encoding: bool = ...): ...

class VideoUploadSession:
    def __init__(self, video: Any, wait_for_encoding: bool = ..., interval: int = ..., timeout: int = ...) -> None: ...
    def start(self): ...
    def getStartRequestContext(self): ...
    def getTransferRequestContext(self): ...
    def getFinishRequestContext(self): ...

class VideoUploadRequestManager(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    def __init__(self, api: Any) -> None: ...
    @abstractmethod
    def send_request(self, context: Any) -> Any: ...
    @abstractmethod
    def getParamsFromContext(self, context: Any) -> Any: ...

class VideoUploadStartRequestManager(VideoUploadRequestManager):
    def send_request(self, context: Any): ...
    def getParamsFromContext(self, context: Any): ...

class VideoUploadTransferRequestManager(VideoUploadRequestManager):
    def send_request(self, context: Any): ...
    def getParamsFromContext(self, context: Any): ...

class VideoUploadFinishRequestManager(VideoUploadRequestManager):
    def send_request(self, context: Any): ...
    def getParamsFromContext(self, context: Any): ...

class VideoUploadRequestContext:
    @property
    def account_id(self): ...
    @account_id.setter
    def account_id(self, account_id: Any) -> None: ...
    @property
    def file_name(self): ...
    @file_name.setter
    def file_name(self, name: Any) -> None: ...
    @property
    def file_size(self): ...
    @file_size.setter
    def file_size(self, size: Any) -> None: ...
    @property
    def session_id(self): ...
    @session_id.setter
    def session_id(self, session_id: Any) -> None: ...
    @property
    def start_offset(self): ...
    @start_offset.setter
    def start_offset(self, start_offset: Any) -> None: ...
    @property
    def end_offset(self): ...
    @end_offset.setter
    def end_offset(self, end_offset: Any) -> None: ...
    @property
    def file(self): ...
    @file.setter
    def file(self, file: Any) -> None: ...
    @property
    def file_path(self): ...
    @file_path.setter
    def file_path(self, filepath: Any) -> None: ...

class VideoUploadRequest:
    def __init__(self, api: Any) -> None: ...
    def send(self, path: Any): ...
    def setParams(self, params: Any, files: Optional[Any] = ...) -> None: ...

class VideoEncodingStatusChecker:
    @staticmethod
    def waitUntilReady(api: Any, video_id: Any, interval: Any, timeout: Any) -> None: ...
    @staticmethod
    def getStatus(api: Any, video_id: Any): ...
