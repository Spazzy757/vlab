from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.typechecker import TypeChecker as TypeChecker
from typing import Any, Optional

class LiveVideo(AbstractCrudObject):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    class Field(AbstractObject.Field):
        ad_break_config: str = ...
        ad_break_failure_reason: str = ...
        broadcast_start_time: str = ...
        copyright: str = ...
        creation_time: str = ...
        dash_ingest_url: str = ...
        dash_preview_url: str = ...
        description: str = ...
        embed_html: str = ...
        field_from: str = ...
        id: str = ...
        ingest_streams: str = ...
        is_manual_mode: str = ...
        is_reference_only: str = ...
        live_encoders: str = ...
        live_views: str = ...
        overlay_url: str = ...
        permalink_url: str = ...
        planned_start_time: str = ...
        seconds_left: str = ...
        secure_stream_url: str = ...
        status: str = ...
        stream_url: str = ...
        targeting: str = ...
        title: str = ...
        total_views: str = ...
        video: str = ...
    class Projection:
        cubemap: str = ...
        equirectangular: str = ...
        half_equirectangular: str = ...
    class SpatialAudioFormat:
        ambix_4: str = ...
    class Status:
        live_now: str = ...
        scheduled_canceled: str = ...
        scheduled_live: str = ...
        scheduled_unpublished: str = ...
        unpublished: str = ...
    class StereoscopicMode:
        left_right: str = ...
        mono: str = ...
        top_bottom: str = ...
    class StreamType:
        ambient: str = ...
        regular: str = ...
    class BroadcastStatus:
        live: str = ...
        live_stopped: str = ...
        processing: str = ...
        scheduled_canceled: str = ...
        scheduled_expired: str = ...
        scheduled_live: str = ...
        scheduled_unpublished: str = ...
        unpublished: str = ...
        vod: str = ...
    class Source:
        owner: str = ...
        target: str = ...
    class LiveCommentModerationSetting:
        discussion: str = ...
        follower: str = ...
        protected_mode: str = ...
        restricted: str = ...
        slow: str = ...
        supporter: str = ...
    def api_delete(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_get(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_update(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_blocked_users(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_comments(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_crosspost_shared_pages(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_crossposted_broadcasts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_errors(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_input_stream(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_likes(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_polls(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_poll(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_reactions(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
