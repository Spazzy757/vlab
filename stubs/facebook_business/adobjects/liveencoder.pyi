from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.typechecker import TypeChecker as TypeChecker
from typing import Any, Optional

class LiveEncoder(AbstractCrudObject):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    class Field(AbstractObject.Field):
        brand: str = ...
        creation_time: str = ...
        current_broadcast: str = ...
        current_input_stream: str = ...
        device_id: str = ...
        id: str = ...
        last_heartbeat_time: str = ...
        model: str = ...
        name: str = ...
        status: str = ...
        version: str = ...
    class CapAudioCodecs:
        aac: str = ...
    class CapStreamingProtocols:
        https_dash: str = ...
        rtmps: str = ...
        webrtc: str = ...
    class CapVideoCodecs:
        h264: str = ...
    class Status:
        capture: str = ...
        live: str = ...
        none: str = ...
        preview: str = ...
        ready: str = ...
        register: str = ...
    def api_delete(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_get(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_update(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_telemetry(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
