from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.typechecker import TypeChecker as TypeChecker
from typing import Any, Optional

class Event(AbstractCrudObject):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    class Field(AbstractObject.Field):
        attending_count: str = ...
        can_guests_invite: str = ...
        category: str = ...
        cover: str = ...
        declined_count: str = ...
        description: str = ...
        discount_code_enabled: str = ...
        end_time: str = ...
        event_times: str = ...
        guest_list_enabled: str = ...
        id: str = ...
        interested_count: str = ...
        is_canceled: str = ...
        is_draft: str = ...
        is_online: str = ...
        is_page_owned: str = ...
        maybe_count: str = ...
        name: str = ...
        noreply_count: str = ...
        owner: str = ...
        parent_group: str = ...
        place: str = ...
        scheduled_publish_time: str = ...
        start_time: str = ...
        ticket_uri: str = ...
        ticket_uri_start_sales_time: str = ...
        ticketing_privacy_uri: str = ...
        ticketing_terms_uri: str = ...
        timezone: str = ...
        type: str = ...
        updated_time: str = ...
    class Category:
        art_event: str = ...
        book_event: str = ...
        class_event: str = ...
        comedy_event: str = ...
        conference_event: str = ...
        dance_event: str = ...
        dining_event: str = ...
        family_event: str = ...
        festival_event: str = ...
        fitness: str = ...
        food_tasting: str = ...
        fundraiser: str = ...
        lecture: str = ...
        meetup: str = ...
        movie_event: str = ...
        music_event: str = ...
        neighborhood: str = ...
        nightlife: str = ...
        other: str = ...
        religious_event: str = ...
        shopping: str = ...
        sports_event: str = ...
        theater_event: str = ...
        volunteering: str = ...
        workshop: str = ...
    class Type:
        community: str = ...
        group: str = ...
        private: str = ...
        public: str = ...
    class EventStateFilter:
        canceled: str = ...
        draft: str = ...
        published: str = ...
        scheduled_draft_for_publication: str = ...
    class TimeFilter:
        past: str = ...
        upcoming: str = ...
    def api_get(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_comments(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_feed(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_live_videos(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_live_video(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_photos(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_picture(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_posts(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_roles(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_videos(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
