from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.mixins import CanValidate as CanValidate, HasAdLabels as HasAdLabels
from facebook_business.typechecker import TypeChecker as TypeChecker
from typing import Any, Optional

class Campaign(AbstractCrudObject, HasAdLabels, CanValidate):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    class Field(AbstractObject.Field):
        account_id: str = ...
        adlabels: str = ...
        bid_strategy: str = ...
        boosted_object_id: str = ...
        brand_lift_studies: str = ...
        budget_rebalance_flag: str = ...
        budget_remaining: str = ...
        buying_type: str = ...
        can_create_brand_lift_study: str = ...
        can_use_spend_cap: str = ...
        configured_status: str = ...
        created_time: str = ...
        daily_budget: str = ...
        effective_status: str = ...
        id: str = ...
        issues_info: str = ...
        last_budget_toggling_time: str = ...
        lifetime_budget: str = ...
        name: str = ...
        objective: str = ...
        pacing_type: str = ...
        promoted_object: str = ...
        recommendations: str = ...
        source_campaign: str = ...
        source_campaign_id: str = ...
        special_ad_categories: str = ...
        special_ad_category: str = ...
        spend_cap: str = ...
        start_time: str = ...
        status: str = ...
        stop_time: str = ...
        topline_id: str = ...
        updated_time: str = ...
        adbatch: str = ...
        execution_options: str = ...
        iterative_split_test_configs: str = ...
        upstream_events: str = ...
    class BidStrategy:
        cost_cap: str = ...
        lowest_cost_without_cap: str = ...
        lowest_cost_with_bid_cap: str = ...
        target_cost: str = ...
    class ConfiguredStatus:
        active: str = ...
        archived: str = ...
        deleted: str = ...
        paused: str = ...
    class EffectiveStatus:
        active: str = ...
        archived: str = ...
        deleted: str = ...
        in_process: str = ...
        paused: str = ...
        with_issues: str = ...
    class Status:
        active: str = ...
        archived: str = ...
        deleted: str = ...
        paused: str = ...
    class DatePreset:
        last_14d: str = ...
        last_28d: str = ...
        last_30d: str = ...
        last_3d: str = ...
        last_7d: str = ...
        last_90d: str = ...
        last_month: str = ...
        last_quarter: str = ...
        last_week_mon_sun: str = ...
        last_week_sun_sat: str = ...
        last_year: str = ...
        lifetime: str = ...
        this_month: str = ...
        this_quarter: str = ...
        this_week_mon_today: str = ...
        this_week_sun_today: str = ...
        this_year: str = ...
        today: str = ...
        yesterday: str = ...
    class ExecutionOptions:
        include_recommendations: str = ...
        validate_only: str = ...
    class Objective:
        app_installs: str = ...
        brand_awareness: str = ...
        conversions: str = ...
        event_responses: str = ...
        lead_generation: str = ...
        link_clicks: str = ...
        local_awareness: str = ...
        messages: str = ...
        offer_claims: str = ...
        page_likes: str = ...
        post_engagement: str = ...
        product_catalog_sales: str = ...
        reach: str = ...
        store_visits: str = ...
        video_views: str = ...
    class SpecialAdCategories:
        credit: str = ...
        employment: str = ...
        housing: str = ...
        none: str = ...
    class Operator:
        all: str = ...
        any: str = ...
    class SpecialAdCategory:
        credit: str = ...
        employment: str = ...
        housing: str = ...
        none: str = ...
    class StatusOption:
        active: str = ...
        inherited_from_source: str = ...
        paused: str = ...
    @classmethod
    def get_endpoint(cls): ...
    def api_create(self, parent_id: Any, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_delete(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_get(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_update(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ad_studies(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_ad_label(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ad_rules_governed(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ads(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_ad_sets(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_content_delivery_report(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_copies(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_copy(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_insights(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., is_async: bool = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_insights_async(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
