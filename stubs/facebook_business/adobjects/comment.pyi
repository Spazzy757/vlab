from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.typechecker import TypeChecker as TypeChecker
from typing import Any, Optional

class Comment(AbstractCrudObject):
    def __init__(self, fbid: Optional[Any] = ..., parent_id: Optional[Any] = ..., api: Optional[Any] = ...) -> None: ...
    class Field(AbstractObject.Field):
        admin_creator: str = ...
        application: str = ...
        attachment: str = ...
        can_comment: str = ...
        can_hide: str = ...
        can_like: str = ...
        can_remove: str = ...
        can_reply_privately: str = ...
        comment_count: str = ...
        created_time: str = ...
        field_from: str = ...
        id: str = ...
        is_hidden: str = ...
        is_private: str = ...
        like_count: str = ...
        live_broadcast_timestamp: str = ...
        message: str = ...
        message_tags: str = ...
        object: str = ...
        parent: str = ...
        permalink_url: str = ...
        private_reply_conversation: str = ...
        user_likes: str = ...
    class CommentPrivacyValue:
        default_privacy: str = ...
        friends_and_post_owner: str = ...
        friends_only: str = ...
        graphql_multiple_value_hack_do_not_use: str = ...
        owner_or_commenter: str = ...
        side_conversation: str = ...
        side_conversation_and_post_owner: str = ...
    class Filter:
        stream: str = ...
        toplevel: str = ...
    class LiveFilter:
        filter_low_quality: str = ...
        no_filter: str = ...
    class Order:
        chronological: str = ...
        reverse_chronological: str = ...
    def api_delete(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_get(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def api_update(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_comments(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_comment(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def delete_likes(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_likes(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def create_like(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
    def get_reactions(self, fields: Optional[Any] = ..., params: Optional[Any] = ..., batch: Optional[Any] = ..., success: Optional[Any] = ..., failure: Optional[Any] = ..., pending: bool = ...): ...
